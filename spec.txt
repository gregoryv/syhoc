            Format rules for plain-text specifications

                         by Gregory Vincic



Abstract

Specifications need to be concise and correct.  Preformated RFC like
documents are easy to read and many follow [RFC 2119] for phrasing
requirements.  This document defines rules for authoring plain-text
specifications and tagging requirements for easy reference.





Table of Contents


§1 Introduction

Plain-text documents, i.e. RFC series, have a proven track record as
workable specifications.  These documents have been enhanced and
clarified over time by subsequent sepcifications like the [RFC 2119].
Specifications that govern software are often written in this format.
There is however no easy way to reference requirements directly when
validating software.  A test suite could e.g. use the wording of a
requirement verbatim if it fails, but duplicating the text within a
test is not feasible as requirements change over time.  Having a way
to easily index all requirements and reference them elsewhere keeps
the requirements at it's source.  Differentiating changes in plain
text is well defined, making it a powerful way of conveing changes
over time.

§1.1 Purpose

Specify minimal format rules to plain-text documents which enables
developers to use processing tools, like [mkdoc], when producing the
final document.  The final document in this context is a preformatted
HTML file.

§1.2 Requirements

The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
document are to be interpreted as described in [RFC 2119] [1].




§2 Format Rules

Main purpose of formatting rules is to enable writers and readers to
focus on content as much as possible and secondary enable tooling to
process them for improved presentation or automated consumption.
[This document] is written following these rules.


§2.1 Sections

Sections SHOULD(#R1) start with the § sign followed by a level and a
heading.

    §9.1.5 Example Heading

§2.2 Links


§2.2.1 Requirement Links

Requirement links SHOULD(#R7) be written within parenthesis and start with
'#R' followed by a number.

    &lpar;#R7&rpar;

Reuirement links MUST(#R8) be placed directly after one of the
keywords as defined by [RFC 2119].


§2.2.2 Links to Sections

Section links MUST(#R2) be written within parentheses.

    "... (&sect;2.1)."

Link sections SHOULD(#R3) replace the § sign with the word 'section'.

    "... (§2.1)."


§2.2.3 External Links

External links SHOULD(#R4) be written within square brackets.

    "&lbrack;RFC 2119&rbrack;"

URL's of external links SHOULD(#R5) be defined on separate lines.
Preferably at the end of a document or section.

    "&lbrack;RFC 2119&rbrack;: https://example.com"

URL defined lines SHOULD(#R9) be removed from the final document.


§2.2.4 Internal Reference Links

Internal reference links SHOULD(#R6) be written within square
brackets.

    "... see [1]."

These links refer to a list of references, most likely found in a
separate section.  In this document see (§3).



§3 References

[1] Bradner, S., "Key words for use in RFCs to Indicate Requirement
    Levels", BCP 14, [RFC 2119], March 1997.



				* * *




§A Appendix

§A.1 Requirements

<list of requirements>



<cat changelog.txt>




<!-- links are excluded from final output -->

[example.com]: https://example.com
[RFC 2119]: https://www.ietf.org/rfc/rfc2119
[mkdoc]: https://github.com/gregoryv/mkdoc
[This document]: https://gregoryv.github.io/water/spec.txt


















